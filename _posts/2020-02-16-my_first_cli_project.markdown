---
layout: post
title:      "My First CLI Project"
date:       2020-02-16 12:57:10 -0500
permalink:  my_first_cli_project
---


Wow, I built my own app from start to finish! I cannot convey all the different emotions that came up from beginning to the middle to the end. I felt excitement, frustration,  and even a bit of anxiety as the deadline approached for me to create a functional app while meeting all the requirements. The most important feeling though, is the one that I feel now, Accomplished! 

Our task was to create an app in which we would build our own Command Line Interface from the ground up, using either the scraping method or an API (Application Programming Interface). Scraping allows you to pull information from any web page that uses HTML and to use the CSS selectors to literally 'scrape' the specific information you need to return. I chose to build my app using this method because I have been learning about scraping and using this method in many of my Learn.co lessons leading up to our first big project. Scraping a web page is tedious (because you have to pinpoint the exact location of each detail you want returned to the user) . However, I wanted to really apply my newfound knowledge and this project was the perfect opportunity for me to utilize my new skills.

I decided to build an app that would help users find volunteer opportunities focused on reducing hunger in Atlanta, GA. I am always looking for volunteer opportunities and alot of different sites make it difficult for users to find volunteer opportunities simply because the user interface isn't appealing or doesn't make it easy enough for users to find what they need and I just don't believe volunteering in your community should be that hard.

I felt that figuring out where to start with my project was the most important step, so I began by thinking about the flow of my app from the user's perspective. I wrote out what I wanted to happen step-by-step and it went something like this: 1) Welcome message 2) If you would like to see a list of opportunities then type 'list' -- a list with titles and associated organization names comes up, 3) If  you would like to see more details on a specific opportunity type the number of the opportunity you would like to learn more about--show user details including address, description of the opportunity, and dates needed. Next, I thought about how I could make all of these things happen for my users, but from the developer's perspective. 

Then, I made another list, this time of all the methods I would need in each of my classes to create the app. I started with my controller class and thought through what I wanted to make happen and started writing names and short descriptions of what I wanted each method to be responsible for. My CLI class would be responsible for getting and displaying the lists and details I wanted returned to the user, my scraper class had to have two scraper methods because the additional details for the second list I was creating needed to scrape a second page within each volunteer opportunity in order to return that information, and lastly my volunteer class contained my attr_accessors (all the methods for the details I wanted returned to the user), my initialize method to create new {#key=, value} pairs for the details I wanted, and my @@all class instance array to hold them all. From there, I had a plan to follow and I just had to execute it!

Setting up my gems and folders and connecting everything to Github went pretty smoothly. I used the Nokogori gem, along with 'open-uri' gem to scrape the webpages. I also found that I had to use  'pry' ** A LOT** which I was not comfortable with using at first but have come to love it throughout this journey. It's so helpful to see what each line of code inside your method is returning and helped me spot errors and figure out if I was scraping the right elements on the pages to get the information I was looking for. 

I began by building out my scraper methods because I figured that would be one of the most challenging parts, since you have to be so detailed when scraping. I found out that if you scrape even the div above where you are supposed to be, the method returns the wrong information or even just an empty string so I really had to pay attention and use pry to make sure I was getting the correct details back. I then set up my volunteer class because this is where I knew I had to create the attr_accessors for all of the details I was retrieving along with creating an array to hold these new methods and my details associated with each. I went to CLI method to make sure I was pulling in the right information from my scraper and volunteer classes for my lists to be created and returned. I built methods to give users instructions on how to use the app, ones that accepted this user input and created and returned a list of volunteer opportunities and then another method to return more details on specific opportunities once the user enters the number of the opportunity from the previous list.

I had to think about certain challenges that came up while I was coding, like how does the user exit the program rather than being stuck in this endless loop of lists and details, so I created a quit_app method that allows the user to type 'no' to exit the program. I also had to think about what could happen if the user decided to type 'Yes' or 'YES' instead of the lowercase  'yes' that I defined in my code. I solved this by calling the .downcase method on the user input so no matter what the user types, it's automatically converted to lowercase. Other issues I would run into would be if I accidentally missed or deleted an 'end' in a method, or when my code wouldn't hit the binding.pry I inserted into a method to do some debugging. All of the errors that came up were frustrating but at the end of the day, I also knew that I had resources to help guide me and that was a really awesome experience as well. 

I would pair up with other classmates when I felt myself getting frustrated after looking at my code for hours and not being able to figure out one error. It was nice just to be able to talk to my classmates to see that I wasn't the only one having these feelings and also to help each other out when Google wasn't up to the task. 

All in all, this was a very rewarding experience and I learned alot about pushing myself to embrace those errors, making myself take breaks even when I didn't want to, and ask for help when needed. Now I have an app to call my own and to keep working on. I plan to add HTML and CSS in the future so that my app will have an actual webpage for users to go to and retrieve information for the volunteer opportunities they are interested in. I would also like to add some filtering features so users can choose a specific cause they would like to volunteer for.  
